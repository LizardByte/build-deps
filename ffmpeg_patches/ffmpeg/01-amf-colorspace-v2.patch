From patchwork Wed Sep  7 13:41:20 2022
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Dmitrii Ovchinnikov <ovchinnikov.dmitrii@gmail.com>
X-Patchwork-Id: 37738
Delivered-To: ffmpegpatchwork2@gmail.com
Received: by 2002:a05:6a20:139a:b0:8f:1db5:eae2 with SMTP id w26csp3916442pzh;
        Wed, 7 Sep 2022 06:41:46 -0700 (PDT)
X-Google-Smtp-Source: 
 AA6agR4MMFhdJetDLrurKJubvJGOlwUDj9VJeQHHmjmrAvxsUiHFnjbG7vv2ANiDJ3VYXhufXzHV
X-Received: by 2002:a05:6402:2816:b0:434:ed38:16f3 with SMTP id
 h22-20020a056402281600b00434ed3816f3mr3146249ede.116.1662558106645;
        Wed, 07 Sep 2022 06:41:46 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1662558106; cv=none;
        d=google.com; s=arc-20160816;
        b=MQ5YBGd9x71lAdtumYCkNMLNdgqBaQNNOBzfP2U1N2VXGfnxWbGmmGOwCJQ02kq5qw
         hn617dmJ4IJ6gRejDKJt8/ShhV8RGI8wnb5q90xt93yJkHmBNpSghTUVcPOygReIj3Sv
         IBQvEG0SypkBkOLsV2BV61KH69si336z8S6uLSLgzGvl9cDpaDiMHI07Cs/J3gEbBz9O
         nXzP/FpeiS99Moaus40hjD42cOfQfiQR3rsYWZzsmmdgIWkGLmLhEBZNu+4Hn0tnrpTs
         53JaV7tP7tQU065GEIEGIiHmhrbueUk2WYnwqdkZB3ft69pjI2aFr/BAJrN5gLR1gT7q
         R/Yg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com;
 s=arc-20160816;
        h=sender:errors-to:content-transfer-encoding:cc:reply-to
         :list-subscribe:list-help:list-post:list-archive:list-unsubscribe
         :list-id:precedence:subject:mime-version:message-id:date:to:from
         :dkim-signature:delivered-to;
        bh=fwQVsxd7ajnVAuCbzPJFKsCRnnoTqpm21V43+67EA/M=;
        b=TkUG/mWTGys43164+23MYOEJ736vzzlPIJergTQlR7TdgeKGFlTHLzYJfnJLHEnmkW
         JNOLoViRGBfk0yvo+xAbpe9tlIeLMaN94ws9Qeh9Cm0aXLgEK2+h377yamSxKciEIe3V
         16JBypp9p7bLkDPSimYjthAUrAKoQGUsHLKOfiuGwxKOnxq3oTqOvAz00J9/Sc/S0GcE
         kduwlGpoT6V01iS4EO8GmDa3E+Ufk1TOXww8Yiqw6DKKIQxvPdM9rZcmTZkqjKSHIBGa
         lwYfv3IfgFRMl5GpNulg0I2ynQh7YFAQL4QEY3y+nBlwhKIFLmVJrCPZOJMuhG6SrfFv
         Pc+Q==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=neutral (body hash did not verify) header.i=@gmail.com
 header.s=20210112 header.b=Gb+Cx6wK;
       spf=pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender)
 smtp.mailfrom=ffmpeg-devel-bounces@ffmpeg.org;
       dmarc=fail (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Return-Path: <ffmpeg-devel-bounces@ffmpeg.org>
Received: from ffbox0-bg.mplayerhq.hu (ffbox0-bg.ffmpeg.org. [79.124.17.100])
        by mx.google.com with ESMTP id
 y4-20020a50e604000000b004478e283f05si11666561edm.104.2022.09.07.06.41.45;
        Wed, 07 Sep 2022 06:41:46 -0700 (PDT)
Received-SPF: pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender) client-ip=79.124.17.100;
Authentication-Results: mx.google.com;
       dkim=neutral (body hash did not verify) header.i=@gmail.com
 header.s=20210112 header.b=Gb+Cx6wK;
       spf=pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender)
 smtp.mailfrom=ffmpeg-devel-bounces@ffmpeg.org;
       dmarc=fail (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from [127.0.1.1] (localhost [127.0.0.1])
	by ffbox0-bg.mplayerhq.hu (Postfix) with ESMTP id 964E568B8E3;
	Wed,  7 Sep 2022 16:41:42 +0300 (EEST)
X-Original-To: ffmpeg-devel@ffmpeg.org
Delivered-To: ffmpeg-devel@ffmpeg.org
Received: from mail-ej1-f47.google.com (mail-ej1-f47.google.com
 [209.85.218.47])
 by ffbox0-bg.mplayerhq.hu (Postfix) with ESMTPS id 8CCF668A867
 for <ffmpeg-devel@ffmpeg.org>; Wed,  7 Sep 2022 16:41:36 +0300 (EEST)
Received: by mail-ej1-f47.google.com with SMTP id u9so30499136ejy.5
 for <ffmpeg-devel@ffmpeg.org>; Wed, 07 Sep 2022 06:41:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=content-transfer-encoding:mime-version:message-id:date:subject:cc
 :to:from:from:to:cc:subject:date;
 bh=bfo38co0oDR5Vx6OzBM6LYm1wUv98RnqIeDxHf+S45c=;
 b=Gb+Cx6wKpuYPhWhRulb+hhJZJx/H1yrlkHCBPMDnpI0ElRXiF4iUWxbLg/8HucnaxY
 X5SCuWsjzYZMazHbmyQVBISsyebJjV4W/ZYtMTdTsLYzokZtEWyIj+BTOmFV2FR12Pcf
 x0EUEqR8pZeVYca9pofWQdww1Yi+eh19k3Jr3H7c8D9TrSJ+JuulRC/61CwQdMkSTSQk
 yrZ7+Vcm/YdF6yuf1iBcVR9Eyg6RbsQxVw4lGVHjPfMhyRBHygEJN0CTNnJlfjsg/Int
 ATWufn8ULInQzs2e0Sb092KlE6stvQnHtw1qVDGw8sZaKTNbuy9b1SmWxVHCy1EZHxqj
 9eQw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=content-transfer-encoding:mime-version:message-id:date:subject:cc
 :to:from:x-gm-message-state:from:to:cc:subject:date;
 bh=bfo38co0oDR5Vx6OzBM6LYm1wUv98RnqIeDxHf+S45c=;
 b=06Kd8offSHe/bjpTi9niSqe13TExK1ia+4Aa3Cvw3vVAUH7i/UiKcH7n3zEFW0rdJw
 V7xKY0nC+hPKCTll0F4WseP2ff8cNIY61IFJQ7ED64bnBROKRWcZuzrk4NyUVS1ZIhuy
 vCP27RvhQMdcOUoaJLzZDwz50N3ed6tveKGZhZXpLtxeCw2KR4t06fLT/U3ozQdVHPGo
 M8NNvLi9Tux+Zph7a3JzTKm0XEPrWl2GHU5bZ+Y3RjAprpS/TjPNBG4+WklW5jvv27nG
 x4ysd5T+QetPqv5iBydfebwwPcKVDunD2xIvRtR/JJvZySOq2NRUaaVxGZSLFSEN6wEW
 nflg==
X-Gm-Message-State: ACgBeo2uaDK/1yHRObUy6qWUHcjs3GvdxtVUV7cDpblGjDFdwbtESi4S
 ag372H18Uxy/8A1mklBrSv7o/VZ13iZ5ldH7V1k=
X-Received: by 2002:a17:907:2d14:b0:73f:fabc:332c with SMTP id
 gs20-20020a1709072d1400b0073ffabc332cmr2566138ejc.704.1662558095542;
 Wed, 07 Sep 2022 06:41:35 -0700 (PDT)
Received: from localhost.localdomain (178-222-7-135.dynamic.isp.telekom.rs.
 [178.222.7.135]) by smtp.gmail.com with ESMTPSA id
 18-20020a170906301200b0073d6093ac93sm8626616ejz.16.2022.09.07.06.41.34
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Wed, 07 Sep 2022 06:41:35 -0700 (PDT)
From: OvchinnikovDmitrii <ovchinnikov.dmitrii@gmail.com>
To: ffmpeg-devel@ffmpeg.org
Date: Wed,  7 Sep 2022 15:41:20 +0200
Message-Id: <20220907134122.1244-1-ovchinnikov.dmitrii@gmail.com>
X-Mailer: git-send-email 2.30.0.windows.2
MIME-Version: 1.0
Subject: [FFmpeg-devel] [avcodec/amfenc: 10 bit support v2 1/3] amf: Update
 the min version to 1.4.23.0 for AMF SDK.
X-BeenThere: ffmpeg-devel@ffmpeg.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: FFmpeg development discussions and patches <ffmpeg-devel.ffmpeg.org>
List-Unsubscribe: <https://ffmpeg.org/mailman/options/ffmpeg-devel>,
 <mailto:ffmpeg-devel-request@ffmpeg.org?subject=unsubscribe>
List-Archive: <https://ffmpeg.org/pipermail/ffmpeg-devel>
List-Post: <mailto:ffmpeg-devel@ffmpeg.org>
List-Help: <mailto:ffmpeg-devel-request@ffmpeg.org?subject=help>
List-Subscribe: <https://ffmpeg.org/mailman/listinfo/ffmpeg-devel>,
 <mailto:ffmpeg-devel-request@ffmpeg.org?subject=subscribe>
Reply-To: FFmpeg development discussions and patches <ffmpeg-devel@ffmpeg.org>
Cc: OvchinnikovDmitrii <ovchinnikov.dmitrii@gmail.com>
Errors-To: ffmpeg-devel-bounces@ffmpeg.org
Sender: "ffmpeg-devel" <ffmpeg-devel-bounces@ffmpeg.org>
X-TUID: +n4Dy5/50Jvs

---
 configure | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/configure b/configure
index 9e51abd0d3..a644e17c95 100755
--- a/configure
+++ b/configure
@@ -7038,7 +7038,7 @@ fi
 
 enabled amf &&
     check_cpp_condition amf "AMF/core/Version.h" \
-        "(AMF_VERSION_MAJOR << 48 | AMF_VERSION_MINOR << 32 | AMF_VERSION_RELEASE << 16 | AMF_VERSION_BUILD_NUM) >= 0x0001000400090000"
+        "(AMF_VERSION_MAJOR << 48 | AMF_VERSION_MINOR << 32 | AMF_VERSION_RELEASE << 16 | AMF_VERSION_BUILD_NUM) >= 0x0001000400170000"
 
 # Funny iconv installations are not unusual, so check it after all flags have been set
 if enabled libc_iconv; then

From patchwork Wed Sep  7 13:41:21 2022
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Dmitrii Ovchinnikov <ovchinnikov.dmitrii@gmail.com>
X-Patchwork-Id: 37739
Delivered-To: ffmpegpatchwork2@gmail.com
Received: by 2002:a05:6a20:139a:b0:8f:1db5:eae2 with SMTP id w26csp3916513pzh;
        Wed, 7 Sep 2022 06:41:56 -0700 (PDT)
X-Google-Smtp-Source: 
 AA6agR5pdCRURIjRGAMm5olNU9YoY57rTqbQ0+4ExIxjYYl3A5VPBEUnS7O/s2HovwzsCh6C77hL
X-Received: by 2002:a17:906:4789:b0:742:55b1:c3f0 with SMTP id
 cw9-20020a170906478900b0074255b1c3f0mr2471733ejc.446.1662558116046;
        Wed, 07 Sep 2022 06:41:56 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1662558116; cv=none;
        d=google.com; s=arc-20160816;
        b=BmcLm4SNDIchlcacZfdfivOrlw3q3TiHsCXKq5ASN0elJ4/UvjqbRSwlTcjoaKqtEk
         wkpNnBKeodRj+tA+jfGoJW8rLIBeB2xcvlr0Sz2ty6kvEprcOLcy/um4YgtFi1XGTT/6
         A7PG6u68LQGGjgLHoGWt5DJvBm1sNbPxt5WzBarcXXlmSuN122TYxgSbu1o3+CCn7LlT
         clRLSZMIk+6tF4S+nVcmHhsWS11d1ZtruLRkOWkxtStZ9bLnOPxhMFHfxjdAEDRqrUzY
         LGkaBmM4m5xegUP+myF5AQW0AWI+1vzuu5J1VTsAs4U4hw4YysL3rFb73hVuWSvMyg69
         YXuQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com;
 s=arc-20160816;
        h=sender:errors-to:content-transfer-encoding:cc:reply-to
         :list-subscribe:list-help:list-post:list-archive:list-unsubscribe
         :list-id:precedence:subject:mime-version:references:in-reply-to
         :message-id:date:to:from:dkim-signature:delivered-to;
        bh=SJX479BKmv05vdkFYJCeibOg1vM/Ms7Xg0rTDNJAXNQ=;
        b=XRJ4096bJ9cSD6E8wpxseztNfPsYh3awp9J4HcLtybqMJ8v7/q57hPOfHzOzYGVrc1
         ZU0TBuRiN7MugfI49ZdBhLEIhtB0y+ePLHyK/uBbcpsEQy8gMN4YRnZGn7LV1+k8t39U
         JKcZORK5GVCXOufSGUz/pKQdp9W/xqk1648CcZ2goB8h6bB/tVjr1myHu8CdYqDNRE5B
         8e76GuQrF9GP8uyOTnjxaPUuZ9qY+J35PEpX10DeHipHsFWQziiyMLuwm5E0s2kpIaL6
         uJHApLqJlGIkb+4jSa+Z/oq0lxTDL8ZJAk4ih4eWp6fT4RbD9MtOaENap/O9r13XY3h0
         14XA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=neutral (body hash did not verify) header.i=@gmail.com
 header.s=20210112 header.b=AyVDGmKv;
       spf=pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender)
 smtp.mailfrom=ffmpeg-devel-bounces@ffmpeg.org;
       dmarc=fail (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Return-Path: <ffmpeg-devel-bounces@ffmpeg.org>
Received: from ffbox0-bg.mplayerhq.hu (ffbox0-bg.ffmpeg.org. [79.124.17.100])
        by mx.google.com with ESMTP id
 t11-20020a056402524b00b0043d9ec0eb4fsi3741161edd.16.2022.09.07.06.41.55;
        Wed, 07 Sep 2022 06:41:56 -0700 (PDT)
Received-SPF: pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender) client-ip=79.124.17.100;
Authentication-Results: mx.google.com;
       dkim=neutral (body hash did not verify) header.i=@gmail.com
 header.s=20210112 header.b=AyVDGmKv;
       spf=pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender)
 smtp.mailfrom=ffmpeg-devel-bounces@ffmpeg.org;
       dmarc=fail (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from [127.0.1.1] (localhost [127.0.0.1])
	by ffbox0-bg.mplayerhq.hu (Postfix) with ESMTP id E02D368BB91;
	Wed,  7 Sep 2022 16:41:44 +0300 (EEST)
X-Original-To: ffmpeg-devel@ffmpeg.org
Delivered-To: ffmpeg-devel@ffmpeg.org
Received: from mail-ej1-f53.google.com (mail-ej1-f53.google.com
 [209.85.218.53])
 by ffbox0-bg.mplayerhq.hu (Postfix) with ESMTPS id 5DE9168B8E3
 for <ffmpeg-devel@ffmpeg.org>; Wed,  7 Sep 2022 16:41:37 +0300 (EEST)
Received: by mail-ej1-f53.google.com with SMTP id gh9so8556706ejc.8
 for <ffmpeg-devel@ffmpeg.org>; Wed, 07 Sep 2022 06:41:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=content-transfer-encoding:mime-version:references:in-reply-to
 :message-id:date:subject:cc:to:from:from:to:cc:subject:date;
 bh=ydijnkDjRp2cnPubjbSkT4zGZ0ApwDkL6LuIADhL5Ng=;
 b=AyVDGmKv3xE4szcx218ZBytCjVtyZYZqzGNUBc0J/Db7y8Gqr983Y5OowUJ/ETSUUb
 7Dh6yGmOT5uSYBsUQOurXWQ3YXdqNR36fVsuI+DmzamrttUIz1BacYEGr3pVUqMnmV71
 7yvDHCwrzjRI2z1LMgPwNGL1zFG0IrriR8267kK5P/+2h3+laV94tgTUokVhl7Ha1nWu
 hDjpdiPp6BI/B4xMfNIp7HCe8OXzUE13EMAYJf+U3GmPxQdTp9Aq4GwJzFHkkSkzTc6s
 aXkYblrSvQHCkfLfWD0WGfeJJDN6ai4Nm5bJEkabpLnvCgt6nNZhI5cC37014rXor6Gb
 QaGQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=content-transfer-encoding:mime-version:references:in-reply-to
 :message-id:date:subject:cc:to:from:x-gm-message-state:from:to:cc
 :subject:date;
 bh=ydijnkDjRp2cnPubjbSkT4zGZ0ApwDkL6LuIADhL5Ng=;
 b=hx4KMQ1DLjNCQfgf1MCx5rtzt3taL6nQq1dLFKgDf/Wp1vaWyJ7jIawF6kQ4RyiDgC
 MBBHEwH9jGnGEao3TClX2eR3GorDSTmm77WK0OuDi4iHt/v2gT7qri9axpYF9jvvSopK
 T7zDcyM4WaUC36bw/cs3yA0vmfYlsmTxUiFZz+SAvbdfDHHvNhdfbJaNk6kQMpxnJ3ls
 li0iONaCtVPL3d4FDrwjS9Ql0eg15MF8KTD2hhcHtTbXY4XeqOMsgzPWETFIrYQgUrv2
 4fhCMx0oL/ROlAIB/xcq2xE0bbCgRMMqSyerVsX46CQzdiHefApgstuE0hn+db2I+Qac
 oz1A==
X-Gm-Message-State: ACgBeo2I02vCN2PF8skfGg6f/2HzrikJVcPrkae54jekwzRTiRqgpQBK
 jc8y9bV3Tn2H7hk7DqxT+rvh/5Fu1wS/4ap9kjk=
X-Received: by 2002:a17:907:7208:b0:73d:7097:ac6f with SMTP id
 dr8-20020a170907720800b0073d7097ac6fmr2482931ejc.388.1662558096422;
 Wed, 07 Sep 2022 06:41:36 -0700 (PDT)
Received: from localhost.localdomain (178-222-7-135.dynamic.isp.telekom.rs.
 [178.222.7.135]) by smtp.gmail.com with ESMTPSA id
 18-20020a170906301200b0073d6093ac93sm8626616ejz.16.2022.09.07.06.41.35
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Wed, 07 Sep 2022 06:41:35 -0700 (PDT)
From: OvchinnikovDmitrii <ovchinnikov.dmitrii@gmail.com>
To: ffmpeg-devel@ffmpeg.org
Date: Wed,  7 Sep 2022 15:41:21 +0200
Message-Id: <20220907134122.1244-2-ovchinnikov.dmitrii@gmail.com>
X-Mailer: git-send-email 2.30.0.windows.2
In-Reply-To: <20220907134122.1244-1-ovchinnikov.dmitrii@gmail.com>
References: <20220907134122.1244-1-ovchinnikov.dmitrii@gmail.com>
MIME-Version: 1.0
Subject: [FFmpeg-devel] [avcodec/amfenc: 10 bit support v2 2/3]
 avcodec/amfenc: Fixes the color information in the output.
X-BeenThere: ffmpeg-devel@ffmpeg.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: FFmpeg development discussions and patches <ffmpeg-devel.ffmpeg.org>
List-Unsubscribe: <https://ffmpeg.org/mailman/options/ffmpeg-devel>,
 <mailto:ffmpeg-devel-request@ffmpeg.org?subject=unsubscribe>
List-Archive: <https://ffmpeg.org/pipermail/ffmpeg-devel>
List-Post: <mailto:ffmpeg-devel@ffmpeg.org>
List-Help: <mailto:ffmpeg-devel-request@ffmpeg.org?subject=help>
List-Subscribe: <https://ffmpeg.org/mailman/listinfo/ffmpeg-devel>,
 <mailto:ffmpeg-devel-request@ffmpeg.org?subject=subscribe>
Reply-To: FFmpeg development discussions and patches <ffmpeg-devel@ffmpeg.org>
Cc: Michael Fabian 'Xaymar' Dirks <michael.dirks@xaymar.com>
Errors-To: ffmpeg-devel-bounces@ffmpeg.org
Sender: "ffmpeg-devel" <ffmpeg-devel-bounces@ffmpeg.org>
X-TUID: DHUTC6RAYJTY

From: Michael Fabian 'Xaymar' Dirks <michael.dirks@xaymar.com>


added 10 bit support for amf hevc.

before:

command - ffmpeg.exe -hide_banner -y -hwaccel d3d11va -hwaccel_output_format d3d11 -i test_10bit_file.mkv -an -c:v h264_amf res.dx11_hw_h264.mkv
output -  Format of input frames context (p010le) is not supported by AMF.
command - ffmpeg.exe -hide_banner -y -hwaccel d3d11va -hwaccel_output_format d3d11 -i test_10bit_file -an -c:v hevc_amf res.dx11_hw_hevc.mkv
output -  Format of input frames context (p010le) is not supported by AMF.

after:

command - ffmpeg.exe -hide_banner -y -hwaccel d3d11va -hwaccel_output_format d3d11 -i test_10bit_file -an -c:v h264_amf res.dx11_hw_h264.mkv
output -  8bit file
command - ffmpeg.exe -hide_banner -y -hwaccel d3d11va -hwaccel_output_format d3d11 -i test_10bit_file -an -c:v hevc_amf res.dx11_hw_hevc.mkv
output -  10bit file

v2 - lost line returned in ff_amf_pix_fmts
---
 libavcodec/amfenc.c      |  2 ++
 libavcodec/amfenc.h      |  1 +
 libavcodec/amfenc_h264.c | 46 ++++++++++++++++++++++++++++++++-
 libavcodec/amfenc_hevc.c | 55 +++++++++++++++++++++++++++++++++++++++-
 4 files changed, 102 insertions(+), 2 deletions(-)

diff --git a/libavcodec/amfenc.c b/libavcodec/amfenc.c
index a033e1220e..efff9b5ae8 100644
--- a/libavcodec/amfenc.c
+++ b/libavcodec/amfenc.c
@@ -60,6 +60,7 @@ const enum AVPixelFormat ff_amf_pix_fmts[] = {
 #if CONFIG_DXVA2
     AV_PIX_FMT_DXVA2_VLD,
 #endif
+	AV_PIX_FMT_P010,
     AV_PIX_FMT_NONE
 };
 
@@ -72,6 +73,7 @@ static const FormatMap format_map[] =
 {
     { AV_PIX_FMT_NONE,       AMF_SURFACE_UNKNOWN },
     { AV_PIX_FMT_NV12,       AMF_SURFACE_NV12 },
+    { AV_PIX_FMT_P010,       AMF_SURFACE_P010 },
     { AV_PIX_FMT_BGR0,       AMF_SURFACE_BGRA },
     { AV_PIX_FMT_RGB0,       AMF_SURFACE_RGBA },
     { AV_PIX_FMT_GRAY8,      AMF_SURFACE_GRAY8 },
diff --git a/libavcodec/amfenc.h b/libavcodec/amfenc.h
index 1ab98d2f78..c5ee9d7e35 100644
--- a/libavcodec/amfenc.h
+++ b/libavcodec/amfenc.h
@@ -21,6 +21,7 @@
 
 #include <AMF/core/Factory.h>
 
+#include <AMF/components/ColorSpace.h>
 #include <AMF/components/VideoEncoderVCE.h>
 #include <AMF/components/VideoEncoderHEVC.h>
 
diff --git a/libavcodec/amfenc_h264.c b/libavcodec/amfenc_h264.c
index eaf7f974f3..7a0198e6a8 100644
--- a/libavcodec/amfenc_h264.c
+++ b/libavcodec/amfenc_h264.c
@@ -138,6 +138,9 @@ static av_cold int amf_encode_init_h264(AVCodecContext *avctx)
     AMFRate                          framerate;
     AMFSize                          framesize = AMFConstructSize(avctx->width, avctx->height);
     int                              deblocking_filter = (avctx->flags & AV_CODEC_FLAG_LOOP_FILTER) ? 1 : 0;
+    amf_int64                        color_depth;
+    amf_int64                        color_profile;
+    enum                             AVPixelFormat pix_fmt;
 
     if (avctx->framerate.num > 0 && avctx->framerate.den > 0) {
         framerate = AMFConstructRate(avctx->framerate.num, avctx->framerate.den);
@@ -195,10 +198,51 @@ static av_cold int amf_encode_init_h264(AVCodecContext *avctx)
         AMF_ASSIGN_PROPERTY_RATIO(res, ctx->encoder, AMF_VIDEO_ENCODER_ASPECT_RATIO, ratio);
     }
 
-    /// Color Range (Partial/TV/MPEG or Full/PC/JPEG)
+    // Color Metadata
+    /// Color Range (Support for older Drivers)
     if (avctx->color_range == AVCOL_RANGE_JPEG) {
         AMF_ASSIGN_PROPERTY_BOOL(res, ctx->encoder, AMF_VIDEO_ENCODER_FULL_RANGE_COLOR, 1);
+    } else {
+        AMF_ASSIGN_PROPERTY_BOOL(res, ctx->encoder, AMF_VIDEO_ENCODER_FULL_RANGE_COLOR, 0);
+    }
+    /// Color Space & Depth
+    pix_fmt = avctx->hw_frames_ctx ? ((AVHWFramesContext*)avctx->hw_frames_ctx->data)->sw_format
+                                : avctx->pix_fmt;
+    color_depth = AMF_COLOR_BIT_DEPTH_8;
+    if (pix_fmt == AV_PIX_FMT_P010) {
+        color_depth = AMF_COLOR_BIT_DEPTH_10;
+    }
+    color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_UNKNOWN;
+    switch (avctx->colorspace) {
+    case AVCOL_SPC_SMPTE170M:
+        if (avctx->color_range == AVCOL_RANGE_JPEG) {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_FULL_601;
+        } else {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_601;
+        }
+        break;
+    case AVCOL_SPC_BT709:
+        if (avctx->color_range == AVCOL_RANGE_JPEG) {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_FULL_709;
+        } else {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_709;
+        }
+        break;
+    case AVCOL_SPC_BT2020_NCL:
+    case AVCOL_SPC_BT2020_CL:
+        if (avctx->color_range == AVCOL_RANGE_JPEG) {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_FULL_2020;
+        } else {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_2020;
+        }
+        break;
     }
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_COLOR_BIT_DEPTH, color_depth);
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_OUTPUT_COLOR_PROFILE, color_profile);
+    /// Color Transfer Characteristics (AMF matches ISO/IEC)
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_OUTPUT_TRANSFER_CHARACTERISTIC, (amf_int64)avctx->color_trc);
+    /// Color Primaries (AMF matches ISO/IEC)
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_OUTPUT_COLOR_PRIMARIES, (amf_int64)avctx->color_primaries);
 
     // autodetect rate control method
     if (ctx->rate_control_mode == AMF_VIDEO_ENCODER_RATE_CONTROL_METHOD_UNKNOWN) {
diff --git a/libavcodec/amfenc_hevc.c b/libavcodec/amfenc_hevc.c
index 9b46946f1e..804d35bbd3 100644
--- a/libavcodec/amfenc_hevc.c
+++ b/libavcodec/amfenc_hevc.c
@@ -31,8 +31,9 @@ static const AVOption options[] = {
     { "lowlatency",     "", 0, AV_OPT_TYPE_CONST, { .i64 = AMF_VIDEO_ENCODER_HEVC_USAGE_LOW_LATENCY },          0, 0, VE, "usage" },
     { "webcam",         "", 0, AV_OPT_TYPE_CONST, { .i64 = AMF_VIDEO_ENCODER_HEVC_USAGE_WEBCAM },               0, 0, VE, "usage" },
 
-    { "profile",        "Set the profile (default main)",           OFFSET(profile),   AV_OPT_TYPE_INT,{ .i64 = AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN }, AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN, AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN, VE, "profile" },
+    { "profile",        "Set the profile (default main)",           OFFSET(profile),   AV_OPT_TYPE_INT,{ .i64 = AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN }, AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN, AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN_10, VE, "profile" },
     { "main",           "", 0,                      AV_OPT_TYPE_CONST,{ .i64 = AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN }, 0, 0, VE, "profile" },
+    { "main10",         "", 0,                      AV_OPT_TYPE_CONST,{ .i64 = AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN_10 }, 0, 0, VE, "profile" },
 
     { "profile_tier",   "Set the profile tier (default main)",      OFFSET(tier), AV_OPT_TYPE_INT,{ .i64 = AMF_VIDEO_ENCODER_HEVC_TIER_MAIN }, AMF_VIDEO_ENCODER_HEVC_TIER_MAIN, AMF_VIDEO_ENCODER_HEVC_TIER_HIGH, VE, "tier" },
     { "main",           "", 0, AV_OPT_TYPE_CONST, { .i64 = AMF_VIDEO_ENCODER_HEVC_TIER_MAIN }, 0, 0, VE, "tier" },
@@ -105,6 +106,9 @@ static av_cold int amf_encode_init_hevc(AVCodecContext *avctx)
     AMFRate             framerate;
     AMFSize             framesize = AMFConstructSize(avctx->width, avctx->height);
     int                 deblocking_filter = (avctx->flags & AV_CODEC_FLAG_LOOP_FILTER) ? 1 : 0;
+    amf_int64           color_depth;
+    amf_int64           color_profile;
+    enum                AVPixelFormat pix_fmt;
 
     if (avctx->framerate.num > 0 && avctx->framerate.den > 0) {
         framerate = AMFConstructRate(avctx->framerate.num, avctx->framerate.den);
@@ -122,10 +126,14 @@ static av_cold int amf_encode_init_hevc(AVCodecContext *avctx)
 
     AMF_ASSIGN_PROPERTY_RATE(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_FRAMERATE, framerate);
 
+    color_depth = AMF_COLOR_BIT_DEPTH_8;
     switch (avctx->profile) {
     case FF_PROFILE_HEVC_MAIN:
         profile = AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN;
         break;
+    case FF_PROFILE_HEVC_MAIN_10:
+        profile = AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN_10;
+        break;
     default:
         break;
     }
@@ -154,6 +162,51 @@ static av_cold int amf_encode_init_hevc(AVCodecContext *avctx)
         AMF_ASSIGN_PROPERTY_RATIO(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_ASPECT_RATIO, ratio);
     }
 
+    // Color Metadata
+    /// Color Range (Support for older Drivers)
+    if (avctx->color_range == AVCOL_RANGE_JPEG) {
+        AMF_ASSIGN_PROPERTY_BOOL(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_NOMINAL_RANGE, 1);
+    } else {
+        AMF_ASSIGN_PROPERTY_BOOL(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_NOMINAL_RANGE, 0);
+    }
+    /// Color Space & Depth
+    pix_fmt = avctx->hw_frames_ctx ? ((AVHWFramesContext*)avctx->hw_frames_ctx->data)->sw_format
+                                    : avctx->pix_fmt;
+    if (pix_fmt == AV_PIX_FMT_P010) {
+        color_depth = AMF_COLOR_BIT_DEPTH_10;
+    }
+    color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_UNKNOWN;
+    switch (avctx->colorspace) {
+    case AVCOL_SPC_SMPTE170M:
+        if (avctx->color_range == AVCOL_RANGE_JPEG) {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_FULL_601;
+        } else {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_601;
+        }
+        break;
+    case AVCOL_SPC_BT709:
+        if (avctx->color_range == AVCOL_RANGE_JPEG) {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_FULL_709;
+        } else {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_709;
+        }
+        break;
+    case AVCOL_SPC_BT2020_NCL:
+    case AVCOL_SPC_BT2020_CL:
+        if (avctx->color_range == AVCOL_RANGE_JPEG) {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_FULL_2020;
+        } else {
+            color_profile = AMF_VIDEO_CONVERTER_COLOR_PROFILE_2020;
+        }
+        break;
+    }
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_COLOR_BIT_DEPTH, color_depth);
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_OUTPUT_COLOR_PROFILE, color_profile);
+    /// Color Transfer Characteristics (AMF matches ISO/IEC)
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_OUTPUT_TRANSFER_CHARACTERISTIC, (amf_int64)avctx->color_trc);
+    /// Color Primaries (AMF matches ISO/IEC)
+    AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_OUTPUT_COLOR_PRIMARIES, (amf_int64)avctx->color_primaries);
+
     // Picture control properties
     AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_NUM_GOPS_PER_IDR, ctx->gops_per_idr);
     AMF_ASSIGN_PROPERTY_INT64(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_GOP_SIZE, avctx->gop_size);

From patchwork Wed Sep  7 13:41:22 2022
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Dmitrii Ovchinnikov <ovchinnikov.dmitrii@gmail.com>
X-Patchwork-Id: 37740
Delivered-To: ffmpegpatchwork2@gmail.com
Received: by 2002:a05:6a20:139a:b0:8f:1db5:eae2 with SMTP id w26csp3916591pzh;
        Wed, 7 Sep 2022 06:42:04 -0700 (PDT)
X-Google-Smtp-Source: 
 AA6agR67ot83Nt3c9MlJjr0Tf5wodiNAnKScwqa8ycBFaFxDmS8ZcnEkKYonrvw02A6TlGpFflU6
X-Received: by 2002:a17:906:1350:b0:741:7a1c:f857 with SMTP id
 x16-20020a170906135000b007417a1cf857mr2404211ejb.612.1662558124388;
        Wed, 07 Sep 2022 06:42:04 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1662558124; cv=none;
        d=google.com; s=arc-20160816;
        b=nYKHrh7ic3DjmZ1jcbyfibzjrOO9+Ac2Coe1D8WFtIxTcP0u/ft7cND6gwBN+tm6rU
         R524CU4CcKH1A39BgB1zPN8B8UN9COC/ekmdfBp8pRIvN8ZzLJ8Y5sl/WQ2jBLFUeZLC
         G+6uZ8hbKMwS+ZgFUDMK5wLCoXauBfeMtJrraKRpQQCbBSm8b8LXsloDFzRYWUY3RQlK
         ThasAz+SMrO1O2QdN12DRRsp85Tsso+MDLysRR8Z8o5zNUQT1TslsAgMm0iZeSqa61jq
         F61x3OPY+Mr1yUkn3Qars83WDTq0NTF08RpEbJ05mgmuE+PRUAgbmRsKt14mdXn7WOGj
         Mi9w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com;
 s=arc-20160816;
        h=sender:errors-to:content-transfer-encoding:cc:reply-to
         :list-subscribe:list-help:list-post:list-archive:list-unsubscribe
         :list-id:precedence:subject:mime-version:references:in-reply-to
         :message-id:date:to:from:dkim-signature:delivered-to;
        bh=X2+cpnFqjGaCw6JtEcnzjiBHAx2TX51vNzTd+gDjzZg=;
        b=B/s/2eVVddps9/cTcM5txHTaHazYcJFMJ7JHtliRJ1F4vjGk0PsFzEHKSKbXWav8xy
         vqS/zy78y2/qxZhkIlH144DnnP+Dd4PbZZMrQ90akFBxDPwv18Qb+VO60tre5S/FReK5
         hnRYffLOGR+mhlB2B/wfceHoqeD4Ycuc8vSmdGY2ubl1FMqlP9mkjHNOy0tpRln2AQVW
         qQt9j2RllaS9ws6xigJiFWuuSxvKwLn4qTaGAP7cPRCeurch3+hB+a6vIkTQFK/9/gQR
         aOQlyWq/8WrEbIsgBoBxLfnZs73P8uLrgSd5sgz1/CtPTd/bXxdt3BuTTvc67AW/M6rd
         dJyw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=neutral (body hash did not verify) header.i=@gmail.com
 header.s=20210112 header.b=PKNPEnaC;
       spf=pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender)
 smtp.mailfrom=ffmpeg-devel-bounces@ffmpeg.org;
       dmarc=fail (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Return-Path: <ffmpeg-devel-bounces@ffmpeg.org>
Received: from ffbox0-bg.mplayerhq.hu (ffbox0-bg.ffmpeg.org. [79.124.17.100])
        by mx.google.com with ESMTP id
 x7-20020aa7d387000000b0044e9151d561si5172372edq.542.2022.09.07.06.42.03;
        Wed, 07 Sep 2022 06:42:04 -0700 (PDT)
Received-SPF: pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender) client-ip=79.124.17.100;
Authentication-Results: mx.google.com;
       dkim=neutral (body hash did not verify) header.i=@gmail.com
 header.s=20210112 header.b=PKNPEnaC;
       spf=pass (google.com: domain of ffmpeg-devel-bounces@ffmpeg.org
 designates 79.124.17.100 as permitted sender)
 smtp.mailfrom=ffmpeg-devel-bounces@ffmpeg.org;
       dmarc=fail (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Received: from [127.0.1.1] (localhost [127.0.0.1])
	by ffbox0-bg.mplayerhq.hu (Postfix) with ESMTP id F404D68B7AB;
	Wed,  7 Sep 2022 16:41:45 +0300 (EEST)
X-Original-To: ffmpeg-devel@ffmpeg.org
Delivered-To: ffmpeg-devel@ffmpeg.org
Received: from mail-ed1-f54.google.com (mail-ed1-f54.google.com
 [209.85.208.54])
 by ffbox0-bg.mplayerhq.hu (Postfix) with ESMTPS id 2D4A568BAAD
 for <ffmpeg-devel@ffmpeg.org>; Wed,  7 Sep 2022 16:41:38 +0300 (EEST)
Received: by mail-ed1-f54.google.com with SMTP id z8so19776404edb.6
 for <ffmpeg-devel@ffmpeg.org>; Wed, 07 Sep 2022 06:41:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=content-transfer-encoding:mime-version:references:in-reply-to
 :message-id:date:subject:cc:to:from:from:to:cc:subject:date;
 bh=o9kcE8K/RPd1h9GB5WbdXY913eLh62c/yeuQVvbAyz4=;
 b=PKNPEnaCIyA4kOqnxVjUG4OMPOCvj1UzrasUA/WkpI8UdeFfgEn01rwMGK8yRpjSzm
 rVab5Hrtiq8rAVsVc7KQDXMqh8wZntkP0JDLOf1/z9mSCzLq8jQlG95+nXQrFSMUZm7g
 J+ZFBGVeVzzK7yEmWTbdz2iCtBkwMOnRU4TMjCQygcq/lRhKSOBwFO9qk+dnmhBfw5qw
 kgIyj39iJW8YUvYL7s0iip7EacY6ayqLomOW5BrraidABLsF2Ux+5uIXnoCnNZDNOFQq
 68qPhp5MRgR0ib+m8d8dW39+XAEsvl2L2G/qs+t3Joci9T7Yb5F9oEWbTdIaDgVFspvU
 ZzVw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=content-transfer-encoding:mime-version:references:in-reply-to
 :message-id:date:subject:cc:to:from:x-gm-message-state:from:to:cc
 :subject:date;
 bh=o9kcE8K/RPd1h9GB5WbdXY913eLh62c/yeuQVvbAyz4=;
 b=MJbmwLrPGnoE8IU1HEECIKfx+gKKc1BK3VeHkrF7iJEt8uZLQAX38bNRMc+tgKYyVd
 dG2KxGdA3gDzQOstpKaa771uJkF7r/K9qZcR7ou9WMWCzmbgkTUgKlYCgOkaXk3GCYrV
 J4YJLOXv5pYRe5WY68wwQbHzW6oQU27LddxYTdSCATxxN5JQBraa5ZP/PAujGsurjkAb
 T0eQZ6CW0QFRWi1+VIFdEQsOpLlobRkQEipKR8QNpw1Pi6a2ddcfuhe/lUBAPRuwxnxN
 +VFs+ItxO69LNr3eyr231/BuuY5w3PsxgAeaOkMG/gUc2zJddZoEqluKhovX/ts6/NpU
 eqsw==
X-Gm-Message-State: ACgBeo0/P5qiAM21wDxaxqM/jersZPqBLM8AFRSguu8VhUHmZwDV/exr
 MHfviLdqQG5kxQ0XBPK5mRL+wAhnRCxv6M4piFA=
X-Received: by 2002:a05:6402:217:b0:44f:2d3:c8af with SMTP id
 t23-20020a056402021700b0044f02d3c8afmr3226224edv.388.1662558097275;
 Wed, 07 Sep 2022 06:41:37 -0700 (PDT)
Received: from localhost.localdomain (178-222-7-135.dynamic.isp.telekom.rs.
 [178.222.7.135]) by smtp.gmail.com with ESMTPSA id
 18-20020a170906301200b0073d6093ac93sm8626616ejz.16.2022.09.07.06.41.36
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Wed, 07 Sep 2022 06:41:36 -0700 (PDT)
From: OvchinnikovDmitrii <ovchinnikov.dmitrii@gmail.com>
To: ffmpeg-devel@ffmpeg.org
Date: Wed,  7 Sep 2022 15:41:22 +0200
Message-Id: <20220907134122.1244-3-ovchinnikov.dmitrii@gmail.com>
X-Mailer: git-send-email 2.30.0.windows.2
In-Reply-To: <20220907134122.1244-1-ovchinnikov.dmitrii@gmail.com>
References: <20220907134122.1244-1-ovchinnikov.dmitrii@gmail.com>
MIME-Version: 1.0
Subject: [FFmpeg-devel] [avcodec/amfenc: 10 bit support v2 3/3]
 avcodec/amfenc: HDR metadata.
X-BeenThere: ffmpeg-devel@ffmpeg.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: FFmpeg development discussions and patches <ffmpeg-devel.ffmpeg.org>
List-Unsubscribe: <https://ffmpeg.org/mailman/options/ffmpeg-devel>,
 <mailto:ffmpeg-devel-request@ffmpeg.org?subject=unsubscribe>
List-Archive: <https://ffmpeg.org/pipermail/ffmpeg-devel>
List-Post: <mailto:ffmpeg-devel@ffmpeg.org>
List-Help: <mailto:ffmpeg-devel-request@ffmpeg.org?subject=help>
List-Subscribe: <https://ffmpeg.org/mailman/listinfo/ffmpeg-devel>,
 <mailto:ffmpeg-devel-request@ffmpeg.org?subject=subscribe>
Reply-To: FFmpeg development discussions and patches <ffmpeg-devel@ffmpeg.org>
Cc: nyanmisaka <nst799610810@gmail.com>
Errors-To: ffmpeg-devel-bounces@ffmpeg.org
Sender: "ffmpeg-devel" <ffmpeg-devel-bounces@ffmpeg.org>
X-TUID: XXQsStDfJTHQ

From: nyanmisaka <nst799610810@gmail.com>
---
 libavcodec/amfenc.c | 83 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 83 insertions(+)

diff --git a/libavcodec/amfenc.c b/libavcodec/amfenc.c
index efff9b5ae8..346f86bf00 100644
--- a/libavcodec/amfenc.c
+++ b/libavcodec/amfenc.c
@@ -36,6 +36,57 @@
 #include "amfenc.h"
 #include "encode.h"
 #include "internal.h"
+#include "libavutil/mastering_display_metadata.h"
+
+static int amf_save_hdr_metadata(AVCodecContext *avctx, const AVFrame *frame, AMFHDRMetadata *hdrmeta)
+{
+    AVFrameSideData            *sd_display;
+    AVFrameSideData            *sd_light;
+    AVMasteringDisplayMetadata *display_meta;
+    AVContentLightMetadata     *light_meta;
+
+    sd_display = av_frame_get_side_data(frame, AV_FRAME_DATA_MASTERING_DISPLAY_METADATA);
+    if (sd_display) {
+        display_meta = (AVMasteringDisplayMetadata *)sd_display->data;
+        if (display_meta->has_luminance) {
+            const unsigned int luma_den = 10000;
+            hdrmeta->maxMasteringLuminance =
+                (amf_uint32)(luma_den * av_q2d(display_meta->max_luminance));
+            hdrmeta->minMasteringLuminance =
+                FFMIN((amf_uint32)(luma_den * av_q2d(display_meta->min_luminance)), hdrmeta->maxMasteringLuminance);
+        }
+        if (display_meta->has_primaries) {
+            const unsigned int chroma_den = 50000;
+            hdrmeta->redPrimary[0] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->display_primaries[0][0])), chroma_den);
+            hdrmeta->redPrimary[1] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->display_primaries[0][1])), chroma_den);
+            hdrmeta->greenPrimary[0] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->display_primaries[1][0])), chroma_den);
+            hdrmeta->greenPrimary[1] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->display_primaries[1][1])), chroma_den);
+            hdrmeta->bluePrimary[0] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->display_primaries[2][0])), chroma_den);
+            hdrmeta->bluePrimary[1] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->display_primaries[2][1])), chroma_den);
+            hdrmeta->whitePoint[0] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->white_point[0])), chroma_den);
+            hdrmeta->whitePoint[1] =
+                FFMIN((amf_uint16)(chroma_den * av_q2d(display_meta->white_point[1])), chroma_den);
+        }
+
+        sd_light = av_frame_get_side_data(frame, AV_FRAME_DATA_CONTENT_LIGHT_LEVEL);
+        if (sd_light) {
+            light_meta = (AVContentLightMetadata *)sd_light->data;
+            if (light_meta) {
+                hdrmeta->maxContentLightLevel = (amf_uint16)light_meta->MaxCLL;
+                hdrmeta->maxFrameAverageLightLevel = (amf_uint16)light_meta->MaxFALL;
+            }
+        }
+        return 0;
+    }
+    return 1;
+}
 
 #if CONFIG_D3D11VA
 #include <d3d11.h>
@@ -673,6 +724,26 @@ int ff_amf_receive_packet(AVCodecContext *avctx, AVPacket *avpkt)
             frame_ref_storage_buffer->pVtbl->Release(frame_ref_storage_buffer);
         }
 
+        // HDR10 metadata
+        if (frame->color_trc == AVCOL_TRC_SMPTE2084) {
+            AMFBuffer * hdrmeta_buffer = NULL;
+            res = ctx->context->pVtbl->AllocBuffer(ctx->context, AMF_MEMORY_HOST, sizeof(AMFHDRMetadata), &hdrmeta_buffer);
+            if (res == AMF_OK) {
+                AMFHDRMetadata * hdrmeta = (AMFHDRMetadata*)hdrmeta_buffer->pVtbl->GetNative(hdrmeta_buffer);
+                if (amf_save_hdr_metadata(avctx, frame, hdrmeta) == 0) {
+                    switch (avctx->codec->id) {
+                    case AV_CODEC_ID_H264:
+                        AMF_ASSIGN_PROPERTY_INTERFACE(res, ctx->encoder, AMF_VIDEO_ENCODER_INPUT_HDR_METADATA, hdrmeta_buffer); break;
+                    case AV_CODEC_ID_HEVC:
+                        AMF_ASSIGN_PROPERTY_INTERFACE(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_INPUT_HDR_METADATA, hdrmeta_buffer); break;
+                    }
+                    res = amf_set_property_buffer(surface, L"av_frame_hdrmeta", hdrmeta_buffer);
+                    AMF_RETURN_IF_FALSE(avctx, res == AMF_OK, AVERROR_UNKNOWN, "SetProperty failed for \"av_frame_hdrmeta\" with error %d\n", res);
+                }
+                hdrmeta_buffer->pVtbl->Release(hdrmeta_buffer);
+            }
+        }
+
         surface->pVtbl->SetPts(surface, frame->pts);
         AMF_ASSIGN_PROPERTY_INT64(res, surface, PTS_PROP, frame->pts);
 
@@ -731,6 +802,18 @@ int ff_amf_receive_packet(AVCodecContext *avctx, AVPacket *avpkt)
             AMF_RETURN_IF_FALSE(ctx, ret >= 0, ret, "amf_copy_buffer() failed with error %d\n", ret);
 
             if (ctx->delayed_surface != NULL) { // try to resubmit frame
+                if (ctx->delayed_surface->pVtbl->HasProperty(ctx->delayed_surface, L"av_frame_hdrmeta")) {
+                    AMFBuffer * hdrmeta_buffer = NULL;
+                    res = amf_get_property_buffer((AMFData *)ctx->delayed_surface, L"av_frame_hdrmeta", &hdrmeta_buffer);
+                    AMF_RETURN_IF_FALSE(avctx, res == AMF_OK, AVERROR_UNKNOWN, "GetProperty failed for \"av_frame_hdrmeta\" with error %d\n", res);
+                    switch (avctx->codec->id) {
+                    case AV_CODEC_ID_H264:
+                        AMF_ASSIGN_PROPERTY_INTERFACE(res, ctx->encoder, AMF_VIDEO_ENCODER_INPUT_HDR_METADATA, hdrmeta_buffer); break;
+                    case AV_CODEC_ID_HEVC:
+                        AMF_ASSIGN_PROPERTY_INTERFACE(res, ctx->encoder, AMF_VIDEO_ENCODER_HEVC_INPUT_HDR_METADATA, hdrmeta_buffer); break;
+                    }
+                    hdrmeta_buffer->pVtbl->Release(hdrmeta_buffer);
+                }
                 res = ctx->encoder->pVtbl->SubmitInput(ctx->encoder, (AMFData*)ctx->delayed_surface);
                 if (res != AMF_INPUT_FULL) {
                     int64_t pts = ctx->delayed_surface->pVtbl->GetPts(ctx->delayed_surface);
